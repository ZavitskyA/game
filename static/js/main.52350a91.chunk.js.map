{"version":3,"sources":["reducers/board/index.tsx","helpers/reducerSwitchcase.tsx","reducers/index.tsx","reducers/ui/index.tsx","actions/setFieldByPath.tsx","helpers/setFieldByPath.tsx","App/createStore.tsx","components/Board.tsx","index.tsx","App/App.tsx"],"names":["BoardRowValues","switchcaseF","cases","state","type","payload","f","Function","executeIfFunction","switchcase","stateReducer","defaultState","reducer","ui","loading","board","matrix","path","fieldValue","applyPatches","op","value","middles","createHashHistory","thunk","middleware","applyMiddleware","store","createStore","Board","ReactDOM","render","document","getElementById"],"mappings":"4IAIYA,E,uEC2CNC,EAA2B,SAAOC,EAAoBC,EAAUC,EAAcC,GAAnD,OAbY,SAACC,EAAGH,EAAOE,GAAX,OAAwBC,aAAaC,SAAWD,EAAED,EAASF,GAASA,EAc/GK,CA5B6B,SAACN,EAAOC,EAAOC,GAG5C,OAFYA,KAEIF,EAAQA,EAFZE,GAE2BD,EAyBfM,CAAiBP,EAAOC,EAAOC,GAAOD,EAAOE,I,kBD5C3DL,O,iBAAAA,I,qBAAAA,I,qBAAAA,I,qBAAAA,I,qBAAAA,I,sBAAAA,M,KAaL,IEDMU,EDiDmB,SAAOC,EAAiBT,GAAxB,OAA+C,eAC7EC,EAD6E,uDAClEQ,EADkE,yCAE3EP,EAF2E,EAE3EA,KAAMC,EAFqE,EAErEA,QAFqE,OAG1EJ,EAAkBC,EAAOC,EAAOC,EAAMC,ICpDfO,CALO,CACjCC,GCRqC,CACrCC,SAAS,GDQTC,MFI2C,CAC3CC,OAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MEZG,eEbF,oBCUa,SAAC,EAAsBb,GAAvB,IAAGc,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAT,OAC5CC,YAAahB,EAAO,CAAC,CAAEiB,GAAI,UAAWH,OAAMI,MAAsB,KAAfH,EAAoBA,EAAa,WCPhFI,GAFiBC,cAEP,CACdC,MAGEC,EAAaC,IAAe,WAAf,EAAmBJ,GAEzBK,EAAQC,YAEjBlB,EACAe,GCbWI,EAAY,WACvB,OACE,mCCDJC,IAASC,OACP,kBCAqB,kBACrB,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QDFF,MACAK,SAASC,eAAe,W","file":"static/js/main.52350a91.chunk.js","sourcesContent":["export interface BoardState {\n  matrix: BoardRows\n}\n\nexport enum BoardRowValues {\n  empty,\n  player1,\n  player2,\n  player3,\n  player4,\n  player5\n}\n\ntype BoardRows = BoardRow[];\n\nexport type BoardRow = BoardRowValues[];\n\nexport const boardDefaultState: BoardState = {\n  matrix: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  ]\n}\n","import { Action } from '../actions/typings'\n\ntype SwitchcaseReturn<S, P> = S | ((payload: P, state: S) => S);\ntype Switchcase = <S, P>(cases: Cases<S, P>, state: S, type: string) => SwitchcaseReturn<S, P>;\ntype ExecuteIfFunction = <S, P>(f: SwitchcaseReturn<S, P>, state: S, payload: P) => S;\ntype SwitchcaseF = <S, P>(cases: Cases<S, P>, state: S, type: string, payload: P) => S;\ntype Reducer = <S, P>(defaultState: S, cases: Cases<S, P>) => (state: S, action: Action<P>) => S;\n\ninterface Cases<S, P> {\n  [key: string]: (payload: P, state: S) => S;\n}\n\n/**\n * Decide if either case or current state should be returned\n *\n * @param cases Object of Cases\n * @see Cases\n * @param state Current State\n * @param type type of case\n */\nconst switchcase: Switchcase = (cases, state, type) => {\n  let _type = type;\n\n  return _type in cases ? cases[_type] : state;\n};\n\n/**\n * Either executes case function, or returns current state\n *\n * @see switchcase\n * @param f Either case or current state\n * @param state Current state\n * @param payload payload\n */\nconst executeIfFunction: ExecuteIfFunction = (f, state, payload) => (f instanceof Function ? f(payload, state) : state);\n\n/**\n * Returns the result of executeIfFunction call combined with switchcase result.\n * In short - return state, either new or current.\n *\n * @see switchcase\n * @see executeIfFunction\n * @param cases\n * @param state\n * @param type\n * @param payload\n */\nconst switchcaseF: SwitchcaseF = <S, P>(cases: Cases<S, P>, state: S, type: string, payload: P) =>\n  executeIfFunction<S, P>(switchcase<S, P>(cases, state, type), state, payload);\n\n/**\n * This nice function is a reducer on some steroids for performance optimisation\n * purposes.\n *\n * Instead of using good old switch/case, you pass and object of reducer\n * switch cases into this function, under the hood magic decides if any case should\n * be called, or if default should be returned.\n *\n * @param defaultState Default state\n * @param cases Object of cases\n * @see Cases\n * @template S State interface\n * @template P payload interface\n * @returns S\n */\nexport const reducer: Reducer = <S, P>(defaultState: S, cases: Cases<S, P>) => (\n  state: S = defaultState,\n  { type, payload }: Action<P>,\n) => switchcaseF<S, P>(cases, state, type, payload);\n","import { reducer } from '../helpers/reducerSwitchcase'\nimport { setFieldByPath } from '../helpers/setFieldByPath'\nimport { SET_FIELD_BY_PATH } from '../actions/setFieldByPath'\nimport { boardDefaultState, BoardState } from './board'\nimport { uiDefaultState, UIState } from './ui'\n\nexport interface State {\n  ui: UIState,\n  board: BoardState,\n}\n\nexport const defaultState: State = {\n  ui: uiDefaultState,\n  board: boardDefaultState\n}\n\nexport const stateReducer = reducer(defaultState, {\n  [SET_FIELD_BY_PATH]: setFieldByPath\n})\n","export interface UIState {\n  loading: boolean\n}\n\nexport const uiDefaultState: UIState = {\n  loading: false\n}\n","import { SetFieldByPathFieldValue } from '../helpers/setFieldByPath'\nimport { Action, PathReturnType } from './typings'\n\nexport const SET_FIELD_BY_PATH = 'SET_FIELD_BY_PATH'\nexport type SET_FIELD_BY_PATH = Action<{\n  path: PathReturnType;\n  fieldValue: SetFieldByPathFieldValue;\n}>;\n\nexport type PathArg = SET_FIELD_BY_PATH['payload']['path'];\n\nexport type SetFieldByPath = (path: PathArg, fieldValue: SetFieldByPathFieldValue) => SET_FIELD_BY_PATH;\n\nexport const setFieldByPath: SetFieldByPath = (path, fieldValue) => {\n  return {\n    type: SET_FIELD_BY_PATH,\n    payload: {\n      path,\n      fieldValue,\n    },\n  }\n}\n","import { State } from '../reducers'\nimport { applyPatches } from 'immer'\nimport { PathReturnType } from '../actions/typings'\n\nexport type SetFieldByPathFieldValue = boolean | string | null | number\n\ninterface SetFieldByPathPayload {\n  path: PathReturnType;\n  fieldValue: SetFieldByPathFieldValue;\n}\n\ntype SetFieldByPath = (payload: SetFieldByPathPayload, state: State) => State;\n\nexport const setFieldByPath: SetFieldByPath = ({ path, fieldValue }, state) =>\n  applyPatches(state, [{ op: 'replace', path, value: fieldValue !== '' ? fieldValue : null }])\n","import { createHashHistory } from 'history'\nimport { applyMiddleware, createStore } from 'redux'\nimport thunk from 'redux-thunk'\nimport { stateReducer } from '../reducers'\n\nexport const history = createHashHistory()\n\nconst middles = [\n  thunk\n]\n\nlet middleware = applyMiddleware(...middles)\n\nexport let store = createStore(\n  // @ts-ignore\n  stateReducer,\n  middleware,\n)\n\n","import React from 'react'\nimport { FC } from 'react'\n\nexport const Board: FC = () => {\n  return (\n    <div>\n      1\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App/App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n","import React, { FC } from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './createStore'\nimport { Board } from '../components/Board'\n\nexport const App: FC = () => (\n  <Provider store={store}>\n    <Board/>\n  </Provider>\n)\n"],"sourceRoot":""}